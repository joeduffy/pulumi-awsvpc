// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vpc extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'awsvpc:index:Vpc';

    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }

    /**
     * CIDR block for the VPC.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * The ID of the underlying AWS VPC.
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    /**
     * Auto-assigned elastic IP addresses (EIPs) for the NAT gateway(s).
     */
    public /*out*/ readonly natEips!: pulumi.Output<string[] | undefined>;
    /**
     * CIDR blocks for private subnets.
     */
    public readonly privateSubnetCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * IDs for private subnets.
     */
    public /*out*/ readonly privateSubnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * Route table IDs for private subnets.
     */
    public /*out*/ readonly privateSubnetRouteTableIds!: pulumi.Output<string[] | undefined>;
    /**
     * CIDR blocks for protected subnets.
     */
    public readonly protectedSubnetCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * IDs for protected subnets.
     */
    public /*out*/ readonly protectedSubnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * CIDR blocks for public subnets.
     */
    public readonly publicSubnetCidrs!: pulumi.Output<string[]>;
    /**
     * IDs for public subnets.
     */
    public /*out*/ readonly publicSubnetIds!: pulumi.Output<string[]>;
    /**
     * Route table ID for public subnets.
     */
    public /*out*/ readonly publicSubnetRouteTableId!: pulumi.Output<string>;
    /**
     * If private subnets were created, an S3 VPC Endpoint to simplify S3 access.
     */
    public /*out*/ readonly s3VpcEndpointId!: pulumi.Output<string | undefined>;

    /**
     * Create a Vpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcArgs, opts?: pulumi.ComponentResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            inputs["createPrivateSubnets"] = args ? args.createPrivateSubnets : undefined;
            inputs["createProtectedSubnets"] = args ? args.createProtectedSubnets : undefined;
            inputs["numberOfAvailabilityZones"] = args ? args.numberOfAvailabilityZones : undefined;
            inputs["privateSubnetCidrs"] = args ? args.privateSubnetCidrs : undefined;
            inputs["privateSubnetTags"] = args ? args.privateSubnetTags : undefined;
            inputs["protectedSubnetCidrs"] = args ? args.protectedSubnetCidrs : undefined;
            inputs["protectedSubnetTags"] = args ? args.protectedSubnetTags : undefined;
            inputs["publicSubnetCidrs"] = args ? args.publicSubnetCidrs : undefined;
            inputs["publicSubnetTags"] = args ? args.publicSubnetTags : undefined;
            inputs["tenancy"] = args ? args.tenancy : undefined;
            inputs["id"] = undefined /*out*/;
            inputs["natEips"] = undefined /*out*/;
            inputs["privateSubnetIds"] = undefined /*out*/;
            inputs["privateSubnetRouteTableIds"] = undefined /*out*/;
            inputs["protectedSubnetIds"] = undefined /*out*/;
            inputs["publicSubnetIds"] = undefined /*out*/;
            inputs["publicSubnetRouteTableId"] = undefined /*out*/;
            inputs["s3VpcEndpointId"] = undefined /*out*/;
        } else {
            inputs["cidrBlock"] = undefined /*out*/;
            inputs["id"] = undefined /*out*/;
            inputs["natEips"] = undefined /*out*/;
            inputs["privateSubnetCidrs"] = undefined /*out*/;
            inputs["privateSubnetIds"] = undefined /*out*/;
            inputs["privateSubnetRouteTableIds"] = undefined /*out*/;
            inputs["protectedSubnetCidrs"] = undefined /*out*/;
            inputs["protectedSubnetIds"] = undefined /*out*/;
            inputs["publicSubnetCidrs"] = undefined /*out*/;
            inputs["publicSubnetIds"] = undefined /*out*/;
            inputs["publicSubnetRouteTableId"] = undefined /*out*/;
            inputs["s3VpcEndpointId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Vpc.__pulumiType, name, inputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Vpc resource.
 */
export interface VpcArgs {
    /**
     * List of AZs to use for the subnets in the VPC. Note: the logical order is preserved.
     */
    readonly availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CIDR block for the VPC.
     */
    readonly cidrBlock?: pulumi.Input<string>;
    /**
     * Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.
     */
    readonly createPrivateSubnets?: pulumi.Input<boolean>;
    /**
     * Set to true to create a network ACL protected subnet in each AZ. If false, the CIDR parameters for those subnets will be ignored. If true, it also requires that the `createPrivateSubnets` parameter is also true.
     */
    readonly createProtectedSubnets?: pulumi.Input<boolean>;
    /**
     * Number of AZs to use in the VPC. If both are specified, this must match your selections in the list of AZs parameter.
     */
    readonly numberOfAvailabilityZones?: pulumi.Input<number>;
    /**
     * CIDR blocks for private subnets.
     */
    readonly privateSubnetCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to add to private subnets (an array of maps, one per AZ).
     */
    readonly privateSubnetTags?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * CIDR blocks for protected subnets.
     */
    readonly protectedSubnetCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to add to protected subnets (an array of maps, one per AZ).
     */
    readonly protectedSubnetTags?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * CIDR blocks for public subnets.
     */
    readonly publicSubnetCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to add to public subnets (an array of maps, one per AZ).
     */
    readonly publicSubnetTags?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * The allowed tenancy of instances launched into the VPC.
     */
    readonly tenancy?: pulumi.Input<string>;
}
