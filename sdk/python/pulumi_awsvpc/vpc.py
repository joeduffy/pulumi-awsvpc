# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 create_private_subnets: Optional[pulumi.Input[bool]] = None,
                 create_protected_subnets: Optional[pulumi.Input[bool]] = None,
                 number_of_availability_zones: Optional[pulumi.Input[int]] = None,
                 private_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 protected_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vpc resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zones: List of AZs to use for the subnets in the VPC. Note: the logical order is preserved.
        :param pulumi.Input[str] cidr_block: CIDR block for the VPC.
        :param pulumi.Input[bool] create_private_subnets: Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.
        :param pulumi.Input[bool] create_protected_subnets: Set to true to create a network ACL protected subnet in each AZ. If false, the CIDR parameters for those subnets will be ignored. If true, it also requires that the `createPrivateSubnets` parameter is also true.
        :param pulumi.Input[int] number_of_availability_zones: Number of AZs to use in the VPC. If both are specified, this must match your selections in the list of AZs parameter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnet_cidrs: CIDR blocks for private subnets.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_subnet_tags: Tags to add to private subnets (an array of maps, one per AZ).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_subnet_cidrs: CIDR blocks for protected subnets.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] protected_subnet_tags: Tags to add to protected subnets (an array of maps, one per AZ).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnet_cidrs: CIDR blocks for public subnets.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_subnet_tags: Tags to add to public subnets (an array of maps, one per AZ).
        :param pulumi.Input[str] tenancy: The allowed tenancy of instances launched into the VPC.
        """
        if availability_zones is not None:
            pulumi.set(__self__, "availability_zones", availability_zones)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if create_private_subnets is not None:
            pulumi.set(__self__, "create_private_subnets", create_private_subnets)
        if create_protected_subnets is not None:
            pulumi.set(__self__, "create_protected_subnets", create_protected_subnets)
        if number_of_availability_zones is not None:
            pulumi.set(__self__, "number_of_availability_zones", number_of_availability_zones)
        if private_subnet_cidrs is not None:
            pulumi.set(__self__, "private_subnet_cidrs", private_subnet_cidrs)
        if private_subnet_tags is not None:
            pulumi.set(__self__, "private_subnet_tags", private_subnet_tags)
        if protected_subnet_cidrs is not None:
            pulumi.set(__self__, "protected_subnet_cidrs", protected_subnet_cidrs)
        if protected_subnet_tags is not None:
            pulumi.set(__self__, "protected_subnet_tags", protected_subnet_tags)
        if public_subnet_cidrs is not None:
            pulumi.set(__self__, "public_subnet_cidrs", public_subnet_cidrs)
        if public_subnet_tags is not None:
            pulumi.set(__self__, "public_subnet_tags", public_subnet_tags)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of AZs to use for the subnets in the VPC. Note: the logical order is preserved.
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR block for the VPC.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="createPrivateSubnets")
    def create_private_subnets(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.
        """
        return pulumi.get(self, "create_private_subnets")

    @create_private_subnets.setter
    def create_private_subnets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_private_subnets", value)

    @property
    @pulumi.getter(name="createProtectedSubnets")
    def create_protected_subnets(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true to create a network ACL protected subnet in each AZ. If false, the CIDR parameters for those subnets will be ignored. If true, it also requires that the `createPrivateSubnets` parameter is also true.
        """
        return pulumi.get(self, "create_protected_subnets")

    @create_protected_subnets.setter
    def create_protected_subnets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_protected_subnets", value)

    @property
    @pulumi.getter(name="numberOfAvailabilityZones")
    def number_of_availability_zones(self) -> Optional[pulumi.Input[int]]:
        """
        Number of AZs to use in the VPC. If both are specified, this must match your selections in the list of AZs parameter.
        """
        return pulumi.get(self, "number_of_availability_zones")

    @number_of_availability_zones.setter
    def number_of_availability_zones(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_availability_zones", value)

    @property
    @pulumi.getter(name="privateSubnetCidrs")
    def private_subnet_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        CIDR blocks for private subnets.
        """
        return pulumi.get(self, "private_subnet_cidrs")

    @private_subnet_cidrs.setter
    def private_subnet_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_subnet_cidrs", value)

    @property
    @pulumi.getter(name="privateSubnetTags")
    def private_subnet_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Tags to add to private subnets (an array of maps, one per AZ).
        """
        return pulumi.get(self, "private_subnet_tags")

    @private_subnet_tags.setter
    def private_subnet_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "private_subnet_tags", value)

    @property
    @pulumi.getter(name="protectedSubnetCidrs")
    def protected_subnet_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        CIDR blocks for protected subnets.
        """
        return pulumi.get(self, "protected_subnet_cidrs")

    @protected_subnet_cidrs.setter
    def protected_subnet_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_subnet_cidrs", value)

    @property
    @pulumi.getter(name="protectedSubnetTags")
    def protected_subnet_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Tags to add to protected subnets (an array of maps, one per AZ).
        """
        return pulumi.get(self, "protected_subnet_tags")

    @protected_subnet_tags.setter
    def protected_subnet_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "protected_subnet_tags", value)

    @property
    @pulumi.getter(name="publicSubnetCidrs")
    def public_subnet_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        CIDR blocks for public subnets.
        """
        return pulumi.get(self, "public_subnet_cidrs")

    @public_subnet_cidrs.setter
    def public_subnet_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_subnet_cidrs", value)

    @property
    @pulumi.getter(name="publicSubnetTags")
    def public_subnet_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        Tags to add to public subnets (an array of maps, one per AZ).
        """
        return pulumi.get(self, "public_subnet_tags")

    @public_subnet_tags.setter
    def public_subnet_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "public_subnet_tags", value)

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        The allowed tenancy of instances launched into the VPC.
        """
        return pulumi.get(self, "tenancy")

    @tenancy.setter
    def tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy", value)


class Vpc(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 create_private_subnets: Optional[pulumi.Input[bool]] = None,
                 create_protected_subnets: Optional[pulumi.Input[bool]] = None,
                 number_of_availability_zones: Optional[pulumi.Input[int]] = None,
                 private_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 protected_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zones: List of AZs to use for the subnets in the VPC. Note: the logical order is preserved.
        :param pulumi.Input[str] cidr_block: CIDR block for the VPC.
        :param pulumi.Input[bool] create_private_subnets: Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.
        :param pulumi.Input[bool] create_protected_subnets: Set to true to create a network ACL protected subnet in each AZ. If false, the CIDR parameters for those subnets will be ignored. If true, it also requires that the `createPrivateSubnets` parameter is also true.
        :param pulumi.Input[int] number_of_availability_zones: Number of AZs to use in the VPC. If both are specified, this must match your selections in the list of AZs parameter.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_subnet_cidrs: CIDR blocks for private subnets.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] private_subnet_tags: Tags to add to private subnets (an array of maps, one per AZ).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_subnet_cidrs: CIDR blocks for protected subnets.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] protected_subnet_tags: Tags to add to protected subnets (an array of maps, one per AZ).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_subnet_cidrs: CIDR blocks for public subnets.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] public_subnet_tags: Tags to add to public subnets (an array of maps, one per AZ).
        :param pulumi.Input[str] tenancy: The allowed tenancy of instances launched into the VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 create_private_subnets: Optional[pulumi.Input[bool]] = None,
                 create_protected_subnets: Optional[pulumi.Input[bool]] = None,
                 number_of_availability_zones: Optional[pulumi.Input[int]] = None,
                 private_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 protected_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 public_subnet_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_subnet_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            __props__.__dict__["availability_zones"] = availability_zones
            __props__.__dict__["cidr_block"] = cidr_block
            __props__.__dict__["create_private_subnets"] = create_private_subnets
            __props__.__dict__["create_protected_subnets"] = create_protected_subnets
            __props__.__dict__["number_of_availability_zones"] = number_of_availability_zones
            __props__.__dict__["private_subnet_cidrs"] = private_subnet_cidrs
            __props__.__dict__["private_subnet_tags"] = private_subnet_tags
            __props__.__dict__["protected_subnet_cidrs"] = protected_subnet_cidrs
            __props__.__dict__["protected_subnet_tags"] = protected_subnet_tags
            __props__.__dict__["public_subnet_cidrs"] = public_subnet_cidrs
            __props__.__dict__["public_subnet_tags"] = public_subnet_tags
            __props__.__dict__["tenancy"] = tenancy
            __props__.__dict__["id"] = None
            __props__.__dict__["nat_eips"] = None
            __props__.__dict__["private_subnet_ids"] = None
            __props__.__dict__["private_subnet_route_table_ids"] = None
            __props__.__dict__["protected_subnet_ids"] = None
            __props__.__dict__["public_subnet_ids"] = None
            __props__.__dict__["public_subnet_route_table_id"] = None
            __props__.__dict__["s3_vpc_endpoint_id"] = None
        super(Vpc, __self__).__init__(
            'awsvpc:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[str]:
        """
        CIDR block for the VPC.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def id(self) -> pulumi.Output[str]:
        """
        The ID of the underlying AWS VPC.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="natEips")
    def nat_eips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Auto-assigned elastic IP addresses (EIPs) for the NAT gateway(s).
        """
        return pulumi.get(self, "nat_eips")

    @property
    @pulumi.getter(name="privateSubnetCidrs")
    def private_subnet_cidrs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        CIDR blocks for private subnets.
        """
        return pulumi.get(self, "private_subnet_cidrs")

    @property
    @pulumi.getter(name="privateSubnetIds")
    def private_subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IDs for private subnets.
        """
        return pulumi.get(self, "private_subnet_ids")

    @property
    @pulumi.getter(name="privateSubnetRouteTableIds")
    def private_subnet_route_table_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Route table IDs for private subnets.
        """
        return pulumi.get(self, "private_subnet_route_table_ids")

    @property
    @pulumi.getter(name="protectedSubnetCidrs")
    def protected_subnet_cidrs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        CIDR blocks for protected subnets.
        """
        return pulumi.get(self, "protected_subnet_cidrs")

    @property
    @pulumi.getter(name="protectedSubnetIds")
    def protected_subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IDs for protected subnets.
        """
        return pulumi.get(self, "protected_subnet_ids")

    @property
    @pulumi.getter(name="publicSubnetCidrs")
    def public_subnet_cidrs(self) -> pulumi.Output[Sequence[str]]:
        """
        CIDR blocks for public subnets.
        """
        return pulumi.get(self, "public_subnet_cidrs")

    @property
    @pulumi.getter(name="publicSubnetIds")
    def public_subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        IDs for public subnets.
        """
        return pulumi.get(self, "public_subnet_ids")

    @property
    @pulumi.getter(name="publicSubnetRouteTableId")
    def public_subnet_route_table_id(self) -> pulumi.Output[str]:
        """
        Route table ID for public subnets.
        """
        return pulumi.get(self, "public_subnet_route_table_id")

    @property
    @pulumi.getter(name="s3VpcEndpointId")
    def s3_vpc_endpoint_id(self) -> pulumi.Output[Optional[str]]:
        """
        If private subnets were created, an S3 VPC Endpoint to simplify S3 access.
        """
        return pulumi.get(self, "s3_vpc_endpoint_id")

